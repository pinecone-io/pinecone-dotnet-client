errors:
  UnauthorizedError:
    status-code: 401
    type: ErrorResponse
    docs: 'Unauthorized. Possible causes: Invalid API key.'
    examples:
      - value:
          error:
            code: UNAUTHENTICATED
            message: Invalid API key.
          status: 401
        name: Unauthorized
  InternalServerError:
    status-code: 500
    type: ErrorResponse
    docs: Internal server error.
    examples:
      - value:
          error:
            code: UNKNOWN
            message: Internal server error
          status: 500
        name: Internal server error
  BadRequestError:
    status-code: 400
    type: unknown
    docs: Bad request. The request body included invalid request parameters.
    examples:
      - value:
          error:
            code: INVALID_ARGUMENT
            message: Bad request. The request body included invalid request parameters.
          status: 400
        name: Validation error
  PaymentRequiredError:
    status-code: 402
    type: ErrorResponse
    docs: >-
      Payment required. Organization is on a paid plan and is delinquent on
      payment.
    examples:
      - value:
          error:
            code: PAYMENT_REQUIRED
            message: >-
              Request failed. Pay all past due invoices to lift restrictions on
              your account.
          status: 402
        name: Payment required
  ForbiddenError:
    status-code: 403
    type: ErrorResponse
    docs: You've exceed your pod quota.
    examples:
      - value:
          error:
            code: FORBIDDEN
            message: Increase your quota or upgrade to create more indexes.
          status: 403
        name: Forbidden
      - value:
          error:
            code: FORBIDDEN
            message: >-
              Deletion protection is enabled for this index. Disable deletion
              protection before retrying.
          status: 403
        name: Forbidden
      - value:
          error:
            code: FORBIDDEN
            message: >-
              Collection exceeds quota. Maximum allowed on your account is 1.
              Currently have 1.
          status: 403
        name: Forbidden
  NotFoundError:
    status-code: 404
    type: ErrorResponse
    docs: Unknown cloud or region when creating a serverless index.
    examples:
      - value:
          error:
            code: NOT_FOUND
            message: 'Resource cloud: aws region: us-west1 not found.'
          status: 404
        name: Cannot create serverless index with invalid spec.
      - value:
          error:
            code: NOT_FOUND
            message: Index example-index not found.
          status: 404
        name: Index not found
      - value:
          error:
            code: NOT_FOUND
            message: Collection example-collection not found.
          status: 404
        name: Collection not found.
  ConflictError:
    status-code: 409
    type: ErrorResponse
    docs: Index of given name already exists.
    examples:
      - value:
          error:
            code: ALREADY_EXISTS
            message: Resource already exists.
          status: 409
        name: Index name needs to be unique.
      - value:
          error:
            code: ALREADY_EXISTS
            message: Resource already exists.
          status: 409
        name: Collection name needs to be unique.
      - value:
          error:
            code: ALREADY_EXISTS
            message: Resource already exists.
          status: 409
        name: Index name needs to be unique
  UnprocessableEntityError:
    status-code: 422
    type: ErrorResponse
    docs: Unprocessable entity. The request body could not be deserialized.
    examples:
      - value:
          error:
            code: UNPROCESSABLE_ENTITY
            message: >-
              Failed to deserialize the JSON body into the target type: missing
              field `metric` at line 1 column 16
          status: 422
        name: Unprocessable entity
  PreconditionFailedError:
    status-code: 412
    type: ErrorResponse
    docs: There is a pending collection created from this index.
    examples:
      - value:
          error:
            code: FAILED_PRECONDITION
            message: >-
              Unable to delete an index. There are pending collections for this
              index: ['test-collection']
          status: 412
        name: There is a pending collection from this index.
service:
  auth: false
  base-path: ''
  endpoints:
    list_indexes:
      path: /indexes
      method: GET
      auth: true
      docs: This operation returns a list of all indexes in a project.
      source:
        openapi: ../control-plane/openapi/openapi.yml
      display-name: List indexes
      response:
        docs: >-
          This operation returns a list of all the indexes that you have
          previously created, and which are associated with the given project
        type: IndexList
        status-code: 200
      errors:
        - UnauthorizedError
        - InternalServerError
      examples:
        - name: A list containing one serverless index and one pod-based index.
          response:
            body:
              indexes:
                - name: semantic-search
                  dimension: 384
                  metric: cosine
                  host: semantic-search-c01b5b5.svc.us-west1-gcp.pinecone.io
                  deletion_protection: disabled
                  tags:
                    tag0: val0
                    tag1: val1
                  embed:
                    model: multilingual-e5-large
                    metric: cosine
                    dimension: 1536
                    field_map:
                      text: your-text-field
                    read_parameters:
                      input_type: query
                      truncate: NONE
                    write_parameters:
                      input_type: passage
                  spec:
                    pod:
                      environment: us-west1-gcp
                      replicas: 2
                      shards: 2
                      pod_type: p1.x1
                      pods: 4
                      metadata_config:
                        indexed:
                          - genre
                          - title
                          - imdb_rating
                      source_collection: movie-embeddings
                  status:
                    ready: true
                    state: Ready
                  vector_type: dense
                - name: image-search
                  dimension: 200
                  metric: dotproduct
                  host: image-search-a31f9c1.svc.us-east1-gcp.pinecone.io
                  deletion_protection: disabled
                  tags:
                    tag0: val0
                    tag1: val1
                  embed:
                    model: multilingual-e5-large
                    metric: cosine
                    dimension: 1536
                    field_map:
                      text: your-text-field
                    read_parameters:
                      input_type: query
                      truncate: NONE
                    write_parameters:
                      input_type: passage
                  spec:
                    serverless:
                      cloud: aws
                      region: us-east-1
                  status:
                    ready: false
                    state: Initializing
                  vector_type: dense
                - name: sparse-index
                  dimension: 1536
                  metric: dotproduct
                  host: sparse-index-1a2b3c4d.svc.us-east1-gcp.pinecone.io
                  deletion_protection: disabled
                  tags:
                    tag0: val0
                    tag1: val1
                  embed:
                    model: multilingual-e5-large
                    metric: cosine
                    dimension: 1536
                    field_map:
                      text: your-text-field
                    read_parameters:
                      input_type: query
                      truncate: NONE
                    write_parameters:
                      input_type: passage
                  spec:
                    serverless:
                      cloud: aws
                      region: us-east-1
                  status:
                    ready: true
                    state: Ready
                  vector_type: sparse
        - name: A list containing one serverless index.
          response:
            body:
              indexes:
                - name: movie-embeddings
                  dimension: 1536
                  metric: cosine
                  host: movie-embeddings-c01b5b5.svc.us-east1-gcp.pinecone.io
                  deletion_protection: disabled
                  tags:
                    tag0: val0
                    tag1: val1
                  embed:
                    model: multilingual-e5-large
                    metric: cosine
                    dimension: 1536
                    field_map:
                      text: your-text-field
                    read_parameters:
                      input_type: query
                      truncate: NONE
                    write_parameters:
                      input_type: passage
                  spec:
                    serverless:
                      cloud: aws
                      region: us-east-1
                  status:
                    ready: false
                    state: Initializing
                  vector_type: dense
        - name: No indexes created yet.
          response:
            body:
              indexes:
                - name: example-index
                  dimension: 1536
                  metric: cosine
                  host: semantic-search-c01b5b5.svc.us-west1-gcp.pinecone.io
                  deletion_protection: disabled
                  tags:
                    tag0: val0
                    tag1: val1
                  embed:
                    model: multilingual-e5-large
                    metric: cosine
                    dimension: 1536
                    field_map:
                      text: your-text-field
                    read_parameters:
                      input_type: query
                      truncate: NONE
                    write_parameters:
                      input_type: passage
                  spec:
                    serverless:
                      cloud: gcp
                      region: us-east-1
                  status:
                    ready: true
                    state: ScalingUpPodSize
                  vector_type: dense
    create_index:
      path: /indexes
      method: POST
      auth: true
      docs: >
        This operation deploys a Pinecone index. This is where you specify the
        measure of similarity, the dimension of vectors to be stored in the
        index, which cloud provider you would like to deploy with, and more.
          
        For guidance and examples, see [Create an
        index](https://docs.pinecone.io/guides/indexes/create-an-index#create-a-serverless-index).
      source:
        openapi: ../control-plane/openapi/openapi.yml
      display-name: Create an index
      request:
        name: CreateIndexRequest
        body:
          properties:
            name:
              type: string
              docs: >
                The name of the index. Resource name must be 1-45 characters
                long, start and end with an alphanumeric character, and consist
                only of lower case alphanumeric characters or '-'.
              validation:
                minLength: 1
                maxLength: 45
            dimension:
              type: optional<integer>
              docs: The dimensions of the vectors to be inserted in the index.
              validation:
                min: 1
                max: 20000
            metric:
              type: optional<CreateIndexRequestMetric>
              docs: >-
                The distance metric to be used for similarity search. You can
                use 'euclidean', 'cosine', or 'dotproduct'. If the 'vector_type'
                is 'sparse', the metric must be 'dotproduct'. If the
                `vector_type` is `dense`, the metric defaults to 'cosine'.
            deletion_protection: optional<DeletionProtection>
            tags: optional<IndexTags>
            spec: IndexSpec
            vector_type:
              type: optional<VectorType>
              docs: >-
                The index vector type. You can use 'dense' or 'sparse'. If
                'dense', the vector dimension must be specified.  If 'sparse',
                the vector dimension should not be specified.
        content-type: application/json
      response:
        docs: The index has been successfully created.
        type: Index
        status-code: 201
      errors:
        - BadRequestError
        - UnauthorizedError
        - PaymentRequiredError
        - ForbiddenError
        - NotFoundError
        - ConflictError
        - UnprocessableEntityError
        - InternalServerError
      examples:
        - name: Creating a serverless index
          request:
            name: movie-recommendations
            dimension: 1536
            metric: cosine
            deletion_protection: enabled
            spec:
              serverless:
                cloud: gcp
                region: us-east1
          response:
            body:
              name: example-index
              dimension: 1536
              metric: cosine
              host: semantic-search-c01b5b5.svc.us-west1-gcp.pinecone.io
              deletion_protection: disabled
              tags:
                tag0: val0
                tag1: val1
              embed:
                model: multilingual-e5-large
                metric: cosine
                dimension: 1536
                vector_type: dense
                field_map:
                  text: your-text-field
                read_parameters:
                  input_type: query
                  truncate: NONE
                write_parameters:
                  input_type: passage
              spec:
                serverless:
                  cloud: gcp
                  region: us-east-1
              status:
                ready: true
                state: ScalingUpPodSize
              vector_type: dense
        - name: Creating a sparse serverless index
          request:
            name: sparse-index
            metric: dotproduct
            deletion_protection: enabled
            spec:
              serverless:
                cloud: gcp
                region: us-east1
            vector_type: sparse
          response:
            body:
              name: example-index
              dimension: 1536
              metric: cosine
              host: semantic-search-c01b5b5.svc.us-west1-gcp.pinecone.io
              deletion_protection: disabled
              tags:
                tag0: val0
                tag1: val1
              embed:
                model: multilingual-e5-large
                metric: cosine
                dimension: 1536
                vector_type: dense
                field_map:
                  text: your-text-field
                read_parameters:
                  input_type: query
                  truncate: NONE
                write_parameters:
                  input_type: passage
              spec:
                serverless:
                  cloud: gcp
                  region: us-east-1
              status:
                ready: true
                state: ScalingUpPodSize
              vector_type: dense
        - name: Creating a pod-based index
          request:
            name: movie-recommendations
            dimension: 1536
            metric: cosine
            deletion_protection: enabled
            spec:
              pod:
                environment: us-east-1-aws
                replicas: 1
                shards: 1
                pod_type: p1.x1
                pods: 1
                metadata_config:
                  indexed:
                    - genre
                    - title
                    - imdb_rating
                source_collection: movie-embeddings
          response:
            body:
              name: example-index
              dimension: 1536
              metric: cosine
              host: semantic-search-c01b5b5.svc.us-west1-gcp.pinecone.io
              deletion_protection: disabled
              tags:
                tag0: val0
                tag1: val1
              embed:
                model: multilingual-e5-large
                metric: cosine
                dimension: 1536
                vector_type: dense
                field_map:
                  text: your-text-field
                read_parameters:
                  input_type: query
                  truncate: NONE
                write_parameters:
                  input_type: passage
              spec:
                serverless:
                  cloud: gcp
                  region: us-east-1
              status:
                ready: true
                state: ScalingUpPodSize
              vector_type: dense
    describe_index:
      path: /indexes/{index_name}
      method: GET
      auth: true
      docs: Get a description of an index.
      source:
        openapi: ../control-plane/openapi/openapi.yml
      path-parameters:
        index_name:
          type: string
          docs: The name of the index to be described.
      display-name: Describe an index
      response:
        docs: Configuration information and deployment status of the index.
        type: Index
        status-code: 200
      errors:
        - UnauthorizedError
        - NotFoundError
        - InternalServerError
      examples:
        - name: A serverless index
          path-parameters:
            index_name: test-index
          response:
            body:
              name: movie-recommendations
              dimension: 1536
              metric: cosine
              host: movie-recommendations-c01b5b5.svc.us-east1-gcp.pinecone.io
              deletion_protection: disabled
              tags:
                tag0: val0
                tag1: val1
              embed:
                model: multilingual-e5-large
                metric: cosine
                dimension: 1536
                vector_type: dense
                field_map:
                  text: your-text-field
                read_parameters:
                  input_type: query
                  truncate: NONE
                write_parameters:
                  input_type: passage
              spec:
                serverless:
                  cloud: aws
                  region: us-east-1
              status:
                ready: false
                state: Initializing
              vector_type: dense
        - name: A pod-based index
          path-parameters:
            index_name: test-index
          response:
            body:
              name: movie-recommendations
              dimension: 1536
              metric: cosine
              host: movie-recommendations-c01b5b5.svc.us-east1-gcp.pinecone.io
              deletion_protection: disabled
              tags:
                tag0: val0
                tag1: val1
              embed:
                model: multilingual-e5-large
                metric: cosine
                dimension: 1536
                vector_type: dense
                field_map:
                  text: your-text-field
                read_parameters:
                  input_type: query
                  truncate: NONE
                write_parameters:
                  input_type: passage
              spec:
                pod:
                  environment: us-east-1-aws
                  replicas: 1
                  shards: 1
                  pod_type: p1.x1
                  pods: 1
                  metadata_config:
                    indexed:
                      - genre
                      - title
                      - imdb_rating
                  source_collection: movie-embeddings
              status:
                ready: false
                state: Initializing
              vector_type: dense
    delete_index:
      path: /indexes/{index_name}
      method: DELETE
      auth: true
      docs: This operation deletes an existing index.
      source:
        openapi: ../control-plane/openapi/openapi.yml
      path-parameters:
        index_name:
          type: string
          docs: The name of the index to delete.
      display-name: Delete an index
      errors:
        - UnauthorizedError
        - ForbiddenError
        - NotFoundError
        - PreconditionFailedError
        - InternalServerError
      examples:
        - path-parameters:
            index_name: test-index
    configure_index:
      path: /indexes/{index_name}
      method: PATCH
      auth: true
      docs: >-
        This operation configures an existing index. 


        For serverless indexes, you can configure index deletion protection,
        tags, and integrated inference embedding settings for the index. For
        pod-based indexes, you can configure the pod size, number of replicas,
        tags, and index deletion protection.


        It is not possible to change the pod type of a pod-based index. However,
        you can create a collection from a pod-based index and then [create a
        new pod-based index with a different pod
        type](http://docs.pinecone.io/guides/indexes/create-an-index#create-an-index-from-a-collection)
        from the collection. For guidance and examples, see [Configure an
        index](http://docs.pinecone.io/guides/indexes/configure-an-index).
      source:
        openapi: ../control-plane/openapi/openapi.yml
      path-parameters:
        index_name:
          type: string
          docs: The name of the index to configure.
      display-name: Configure an index
      request:
        name: ConfigureIndexRequest
        body:
          properties:
            spec: optional<ConfigureIndexRequestSpec>
            deletion_protection: optional<DeletionProtection>
            tags: optional<IndexTags>
            embed:
              type: optional<ConfigureIndexRequestEmbed>
              docs: >-
                Configure the integrated inference embedding settings for this
                index.


                You can convert an existing index to an integrated index by
                specifying the embedding model and field_map. The index vector
                type and dimension must match the model vector type and
                dimension, and the index similarity metric must be supported by
                the model. Refer to the [model
                guide](https://docs.pinecone.io/guides/inference/understanding-inference#embedding-models)
                for available models and model details.


                You can later change the embedding configuration to update the
                field map, read parameters, or write parameters. Once set, the
                model cannot be changed.
        content-type: application/json
      response:
        docs: >-
          The request to configure the index has been accepted. Check the  index
          status to see when the change has been applied.
        type: Index
        status-code: 202
      errors:
        - BadRequestError
        - UnauthorizedError
        - PaymentRequiredError
        - ForbiddenError
        - NotFoundError
        - UnprocessableEntityError
        - InternalServerError
      examples:
        - name: Vertical scaling with pod size
          path-parameters:
            index_name: test-index
          request:
            spec:
              pod:
                pod_type: p1.x2
          response:
            body:
              name: example-index
              dimension: 1536
              metric: cosine
              host: semantic-search-c01b5b5.svc.us-west1-gcp.pinecone.io
              deletion_protection: disabled
              tags:
                tag0: val0
                tag1: val1
              embed:
                model: multilingual-e5-large
                metric: cosine
                dimension: 1536
                vector_type: dense
                field_map:
                  text: your-text-field
                read_parameters:
                  input_type: query
                  truncate: NONE
                write_parameters:
                  input_type: passage
              spec:
                serverless:
                  cloud: gcp
                  region: us-east-1
              status:
                ready: true
                state: ScalingUpPodSize
              vector_type: dense
        - name: Horizontal scaling with replicas
          path-parameters:
            index_name: test-index
          request:
            spec:
              pod:
                replicas: 4
          response:
            body:
              name: example-index
              dimension: 1536
              metric: cosine
              host: semantic-search-c01b5b5.svc.us-west1-gcp.pinecone.io
              deletion_protection: disabled
              tags:
                tag0: val0
                tag1: val1
              embed:
                model: multilingual-e5-large
                metric: cosine
                dimension: 1536
                vector_type: dense
                field_map:
                  text: your-text-field
                read_parameters:
                  input_type: query
                  truncate: NONE
                write_parameters:
                  input_type: passage
              spec:
                serverless:
                  cloud: gcp
                  region: us-east-1
              status:
                ready: true
                state: ScalingUpPodSize
              vector_type: dense
        - name: Scaling both pod size and number of replicas
          path-parameters:
            index_name: test-index
          request:
            spec:
              pod:
                replicas: 4
                pod_type: p1.x2
          response:
            body:
              name: example-index
              dimension: 1536
              metric: cosine
              host: semantic-search-c01b5b5.svc.us-west1-gcp.pinecone.io
              deletion_protection: disabled
              tags:
                tag0: val0
                tag1: val1
              embed:
                model: multilingual-e5-large
                metric: cosine
                dimension: 1536
                vector_type: dense
                field_map:
                  text: your-text-field
                read_parameters:
                  input_type: query
                  truncate: NONE
                write_parameters:
                  input_type: passage
              spec:
                serverless:
                  cloud: gcp
                  region: us-east-1
              status:
                ready: true
                state: ScalingUpPodSize
              vector_type: dense
        - name: Disable deletion protection for the index
          path-parameters:
            index_name: test-index
          request: {}
          response:
            body:
              name: example-index
              dimension: 1536
              metric: cosine
              host: semantic-search-c01b5b5.svc.us-west1-gcp.pinecone.io
              deletion_protection: disabled
              tags:
                tag0: val0
                tag1: val1
              embed:
                model: multilingual-e5-large
                metric: cosine
                dimension: 1536
                vector_type: dense
                field_map:
                  text: your-text-field
                read_parameters:
                  input_type: query
                  truncate: NONE
                write_parameters:
                  input_type: passage
              spec:
                serverless:
                  cloud: gcp
                  region: us-east-1
              status:
                ready: true
                state: ScalingUpPodSize
              vector_type: dense
        - name: Update tag0 and delete tag1
          path-parameters:
            index_name: test-index
          request:
            tags:
              tag0: new-val
              tag1: ''
          response:
            body:
              name: example-index
              dimension: 1536
              metric: cosine
              host: semantic-search-c01b5b5.svc.us-west1-gcp.pinecone.io
              deletion_protection: disabled
              tags:
                tag0: val0
                tag1: val1
              embed:
                model: multilingual-e5-large
                metric: cosine
                dimension: 1536
                vector_type: dense
                field_map:
                  text: your-text-field
                read_parameters:
                  input_type: query
                  truncate: NONE
                write_parameters:
                  input_type: passage
              spec:
                serverless:
                  cloud: gcp
                  region: us-east-1
              status:
                ready: true
                state: ScalingUpPodSize
              vector_type: dense
    list_collections:
      path: /collections
      method: GET
      auth: true
      docs: |
        This operation returns a list of all collections in a project.
        Serverless indexes do not support collections.
      source:
        openapi: ../control-plane/openapi/openapi.yml
      display-name: List collections
      response:
        docs: >-
          This operation returns a list of all the collections in your current
          project.
        type: CollectionList
        status-code: 200
      errors:
        - UnauthorizedError
        - InternalServerError
      examples:
        - name: Multiple collections with different states
          response:
            body:
              collections:
                - name: small-collection
                  size: 3126700
                  status: Ready
                  dimension: 3
                  vector_count: 99
                  environment: us-east1-gcp
                - name: small-collection-new
                  size: 3126700
                  status: Initializing
                  dimension: 3
                  vector_count: 99
                  environment: us-east1-gcp
                - name: big-collection
                  size: 160087040000000
                  status: Ready
                  dimension: 1536
                  vector_count: 10000000
                  environment: us-east1-gcp
        - name: No collections created yet
          response:
            body:
              collections:
                - name: example-collection
                  size: 10000000
                  status: Initializing
                  dimension: 1536
                  vector_count: 120000
                  environment: us-east1-gcp
    create_collection:
      path: /collections
      method: POST
      auth: true
      docs: |
        This operation creates a Pinecone collection.
          
        Serverless indexes do not support collections.
      source:
        openapi: ../control-plane/openapi/openapi.yml
      display-name: Create a collection
      request:
        name: CreateCollectionRequest
        body:
          properties:
            name:
              type: string
              docs: >
                The name of the collection to be created. Resource name must be
                1-45 characters long, start and end with an alphanumeric
                character, and consist only of lower case alphanumeric
                characters or '-'.
              validation:
                minLength: 1
                maxLength: 45
            source:
              type: string
              docs: >-
                The name of the index to be used as the source for the
                collection.
        content-type: application/json
      response:
        docs: The collection has been successfully created.
        type: CollectionModel
        status-code: 201
      errors:
        - BadRequestError
        - UnauthorizedError
        - PaymentRequiredError
        - ForbiddenError
        - ConflictError
        - UnprocessableEntityError
        - InternalServerError
      examples:
        - name: Creating a collection
          request:
            name: example-collection
            source: example-source-index
          response:
            body:
              name: example-collection
              size: 10000000
              status: Initializing
              dimension: 1536
              vector_count: 120000
              environment: us-east1-gcp
    create_index_for_model:
      path: /indexes/create-for-model
      method: POST
      auth: true
      docs: >-
        This operation creates a serverless integrated inference index for a
        specific embedding model.


        Refer to the [model
        guide](https://docs.pinecone.io/guides/inference/understanding-inference#embedding-models)
        for available models and model details.
      source:
        openapi: ../control-plane/openapi/openapi.yml
      display-name: Create an index for an embedding model
      request:
        name: CreateIndexForModelRequest
        body:
          properties:
            name:
              type: string
              docs: >
                The name of the index. Resource name must be 1-45 characters
                long, start and end with an alphanumeric character, and consist
                only of lower case alphanumeric characters or '-'.
              validation:
                minLength: 1
                maxLength: 45
            cloud:
              type: CreateIndexForModelRequestCloud
              docs: The public cloud where you would like your index hosted.
            region:
              type: string
              docs: The region where you would like your index to be created.
            deletion_protection: optional<DeletionProtection>
            tags: optional<IndexTags>
            embed:
              type: CreateIndexForModelRequestEmbed
              docs: >-
                Specify the integrated inference embedding configuration for the
                index.


                Once set the model cannot be changed, but you can later update
                the embedding configuration for an integrated inference index
                including field map, read parameters, or write parameters.


                Refer to the [model
                guide](https://docs.pinecone.io/guides/inference/understanding-inference#embedding-models)
                for available models and model details.
        content-type: application/json
      response:
        docs: The index has successfully been created for the embedding model.
        type: Index
        status-code: 201
      errors:
        - BadRequestError
        - UnauthorizedError
        - NotFoundError
        - ConflictError
        - UnprocessableEntityError
        - InternalServerError
      examples:
        - name: Creating a serverless index for the specified model
          request:
            name: multilingual-e5-large-index
            cloud: gcp
            region: us-east1
            deletion_protection: enabled
            embed:
              model: multilingual-e5-large
              metric: cosine
              field_map:
                text: your-text-field
          response:
            body:
              name: example-index
              dimension: 1536
              metric: cosine
              host: semantic-search-c01b5b5.svc.us-west1-gcp.pinecone.io
              deletion_protection: disabled
              tags:
                tag0: val0
                tag1: val1
              embed:
                model: multilingual-e5-large
                metric: cosine
                dimension: 1536
                vector_type: dense
                field_map:
                  text: your-text-field
                read_parameters:
                  input_type: query
                  truncate: NONE
                write_parameters:
                  input_type: passage
              spec:
                serverless:
                  cloud: gcp
                  region: us-east-1
              status:
                ready: true
                state: ScalingUpPodSize
              vector_type: dense
    describe_collection:
      path: /collections/{collection_name}
      method: GET
      auth: true
      docs: |
        This operation gets a description of a collection.
        Serverless indexes do not support collections.
      source:
        openapi: ../control-plane/openapi/openapi.yml
      path-parameters:
        collection_name:
          type: string
          docs: The name of the collection to be described.
      display-name: Describe a collection
      response:
        docs: Configuration information and status of the collection.
        type: CollectionModel
        status-code: 200
      errors:
        - UnauthorizedError
        - NotFoundError
        - InternalServerError
      examples:
        - name: A small collection.
          path-parameters:
            collection_name: tiny-collection
          response:
            body:
              name: tiny-collection
              size: 3126700
              status: Ready
              dimension: 3
              vector_count: 99
              environment: us-east1-gcp
    delete_collection:
      path: /collections/{collection_name}
      method: DELETE
      auth: true
      docs: |
        This operation deletes an existing collection.
        Serverless indexes do not support collections.
      source:
        openapi: ../control-plane/openapi/openapi.yml
      path-parameters:
        collection_name:
          type: string
          docs: The name of the collection.
      display-name: Delete a collection
      errors:
        - UnauthorizedError
        - NotFoundError
        - InternalServerError
      examples:
        - path-parameters:
            collection_name: test-collection
  source:
    openapi: ../control-plane/openapi/openapi.yml
types:
  CreateIndexRequestMetric:
    enum:
      - cosine
      - euclidean
      - dotproduct
    docs: >-
      The distance metric to be used for similarity search. You can use
      'euclidean', 'cosine', or 'dotproduct'. If the 'vector_type' is 'sparse',
      the metric must be 'dotproduct'. If the `vector_type` is `dense`, the
      metric defaults to 'cosine'.
    inline: true
    source:
      openapi: ../control-plane/openapi/openapi.yml
  ConfigureIndexRequestSpecPod:
    properties:
      replicas:
        type: optional<integer>
        docs: >-
          The number of replicas. Replicas duplicate your index. They provide
          higher availability and throughput. Replicas can be scaled up or down
          as your needs change.
        default: 1
        validation:
          min: 1
      pod_type:
        type: optional<string>
        docs: >-
          The type of pod to use. One of `s1`, `p1`, or `p2` appended with `.`
          and one of `x1`, `x2`, `x4`, or `x8`.
        default: p1.x1
    source:
      openapi: ../control-plane/openapi/openapi.yml
    inline: true
  ConfigureIndexRequestSpec:
    properties:
      pod: ConfigureIndexRequestSpecPod
    source:
      openapi: ../control-plane/openapi/openapi.yml
    inline: true
  ConfigureIndexRequestEmbed:
    docs: >-
      Configure the integrated inference embedding settings for this index.


      You can convert an existing index to an integrated index by specifying the
      embedding model and field_map. The index vector type and dimension must
      match the model vector type and dimension, and the index similarity metric
      must be supported by the model. Refer to the [model
      guide](https://docs.pinecone.io/guides/inference/understanding-inference#embedding-models)
      for available models and model details.


      You can later change the embedding configuration to update the field map,
      read parameters, or write parameters. Once set, the model cannot be
      changed.
    properties:
      model:
        type: optional<string>
        docs: >-
          The name of the embedding model to use with the index. The index
          dimension and model dimension must match, and the index similarity
          metric must be supported by the model. The index embedding model
          cannot be changed once set.
      field_map:
        type: optional<map<string, unknown>>
        docs: >-
          Identifies the name of the text field from your document model that
          will be embedded.
      read_parameters:
        type: optional<map<string, unknown>>
        docs: The read parameters for the embedding model.
      write_parameters:
        type: optional<map<string, unknown>>
        docs: The write parameters for the embedding model.
    source:
      openapi: ../control-plane/openapi/openapi.yml
    inline: true
  CreateIndexForModelRequestCloud:
    enum:
      - gcp
      - aws
      - azure
    docs: The public cloud where you would like your index hosted.
    inline: true
    source:
      openapi: ../control-plane/openapi/openapi.yml
  CreateIndexForModelRequestEmbedMetric:
    enum:
      - cosine
      - euclidean
      - dotproduct
    docs: >-
      The distance metric to be used for similarity search. You can use
      'euclidean', 'cosine', or 'dotproduct'. If not specified, the metric will
      be defaulted according to the model. Cannot be updated once set.
    inline: true
    source:
      openapi: ../control-plane/openapi/openapi.yml
  CreateIndexForModelRequestEmbed:
    docs: >-
      Specify the integrated inference embedding configuration for the index.


      Once set the model cannot be changed, but you can later update the
      embedding configuration for an integrated inference index including field
      map, read parameters, or write parameters.


      Refer to the [model
      guide](https://docs.pinecone.io/guides/inference/understanding-inference#embedding-models)
      for available models and model details.
    properties:
      model:
        type: string
        docs: The name of the embedding model to use for the index.
      metric:
        type: optional<CreateIndexForModelRequestEmbedMetric>
        docs: >-
          The distance metric to be used for similarity search. You can use
          'euclidean', 'cosine', or 'dotproduct'. If not specified, the metric
          will be defaulted according to the model. Cannot be updated once set.
      field_map:
        type: map<string, unknown>
        docs: >-
          Identifies the name of the text field from your document model that
          will be embedded.
      read_parameters:
        type: optional<map<string, unknown>>
        docs: The read parameters for the embedding model.
      write_parameters:
        type: optional<map<string, unknown>>
        docs: The write parameters for the embedding model.
    source:
      openapi: ../control-plane/openapi/openapi.yml
    inline: true
  IndexTags:
    type: map<string, string>
    docs: >-
      Custom user tags added to an index. Keys must be 80 characters or less.
      Values must be 120 characters or less. Keys must be alphanumeric, '_', or
      '-'.  Values must be alphanumeric, ';', '@', '_', '-', '.', '+', or ' '.
      To unset a key, set the value to be an empty string.
  IndexSpec:
    discriminated: false
    docs: >
      The spec object defines how the index should be deployed.


      For serverless indexes, you define only the cloud and region where the
      index should be hosted. For pod-based indexes, you define the environment
      where the index should be hosted, the pod type and size to use, and other
      index characteristics.
    union:
      - ServerlessIndexSpec
      - PodIndexSpec
    source:
      openapi: ../control-plane/openapi/openapi.yml
  ServerlessSpecCloud:
    enum:
      - gcp
      - aws
      - azure
    docs: The public cloud where you would like your index hosted.
    inline: true
    source:
      openapi: ../control-plane/openapi/openapi.yml
  ServerlessSpec:
    docs: Configuration needed to deploy a serverless index.
    properties:
      cloud:
        type: ServerlessSpecCloud
        docs: The public cloud where you would like your index hosted.
      region:
        type: string
        docs: The region where you would like your index to be created.
    source:
      openapi: ../control-plane/openapi/openapi.yml
  CollectionList:
    docs: The list of collections that exist in the project.
    properties:
      collections: optional<list<CollectionModel>>
    source:
      openapi: ../control-plane/openapi/openapi.yml
  ModelIndexEmbedMetric:
    enum:
      - cosine
      - euclidean
      - dotproduct
    docs: >-
      The distance metric to be used for similarity search. You can use
      'euclidean', 'cosine', or 'dotproduct'. If not specified, the metric will
      be defaulted according to the model. Cannot be updated once set.
    inline: true
    source:
      openapi: ../control-plane/openapi/openapi.yml
  ModelIndexEmbed:
    docs: The embedding model and document fields mapped to embedding inputs.
    properties:
      model:
        type: string
        docs: The name of the embedding model used to create the index.
      metric:
        type: optional<ModelIndexEmbedMetric>
        docs: >-
          The distance metric to be used for similarity search. You can use
          'euclidean', 'cosine', or 'dotproduct'. If not specified, the metric
          will be defaulted according to the model. Cannot be updated once set.
      dimension:
        type: optional<integer>
        docs: The dimensions of the vectors to be inserted in the index.
        validation:
          min: 1
          max: 20000
      vector_type:
        type: optional<VectorType>
        docs: >-
          The index vector type. You can use 'dense' or 'sparse'. If 'dense',
          the vector dimension must be specified.  If 'sparse', the vector
          dimension should not be specified.
      field_map:
        type: optional<map<string, unknown>>
        docs: >-
          Identifies the name of the text field from your document model that is
          embedded.
      read_parameters:
        type: optional<map<string, unknown>>
        docs: The read parameters for the embedding model.
      write_parameters:
        type: optional<map<string, unknown>>
        docs: The write parameters for the embedding model.
    source:
      openapi: ../control-plane/openapi/openapi.yml
  ErrorResponse:
    docs: The response shape used for all error responses.
    properties:
      status:
        type: integer
        docs: The HTTP status code of the error.
      error:
        type: ErrorResponseError
        docs: Detailed information about the error that occurred.
    source:
      openapi: ../metrics/openapi/openapi.yml
  IndexModelMetric:
    enum:
      - cosine
      - euclidean
      - dotproduct
    docs: >-
      The distance metric to be used for similarity search. You can use
      'euclidean', 'cosine', or 'dotproduct'. If the 'vector_type' is 'sparse',
      the metric must be 'dotproduct'. If the `vector_type` is `dense`, the
      metric defaults to 'cosine'.
    inline: true
    source:
      openapi: ../control-plane/openapi/openapi.yml
  IndexModelStatusState:
    enum:
      - Initializing
      - InitializationFailed
      - ScalingUp
      - ScalingDown
      - ScalingUpPodSize
      - ScalingDownPodSize
      - Terminating
      - Ready
    inline: true
    source:
      openapi: ../control-plane/openapi/openapi.yml
  IndexModelStatus:
    properties:
      ready: boolean
      state: IndexModelStatusState
    source:
      openapi: ../control-plane/openapi/openapi.yml
    inline: true
  Index:
    docs: The IndexModel describes the configuration and status of a Pinecone index.
    properties:
      name:
        type: string
        docs: >
          The name of the index. Resource name must be 1-45 characters long,
          start and end with an alphanumeric character, and consist only of
          lower case alphanumeric characters or '-'.
        validation:
          minLength: 1
          maxLength: 45
      dimension:
        type: optional<integer>
        docs: The dimensions of the vectors to be inserted in the index.
        validation:
          min: 1
          max: 20000
      metric:
        type: IndexModelMetric
        docs: >-
          The distance metric to be used for similarity search. You can use
          'euclidean', 'cosine', or 'dotproduct'. If the 'vector_type' is
          'sparse', the metric must be 'dotproduct'. If the `vector_type` is
          `dense`, the metric defaults to 'cosine'.
      host:
        type: string
        docs: The URL address where the index is hosted.
      deletion_protection: optional<DeletionProtection>
      tags: optional<IndexTags>
      embed: optional<ModelIndexEmbed>
      spec: IndexSpec
      status: IndexModelStatus
      vector_type:
        type: VectorType
        docs: >-
          The index vector type. You can use 'dense' or 'sparse'. If 'dense',
          the vector dimension must be specified.  If 'sparse', the vector
          dimension should not be specified.
    source:
      openapi: ../control-plane/openapi/openapi.yml
  IndexList:
    docs: The list of indexes that exist in the project.
    properties:
      indexes: optional<list<Index>>
    source:
      openapi: ../control-plane/openapi/openapi.yml
  PodSpecMetadataConfig:
    docs: >-
      Configuration for the behavior of Pinecone's internal metadata index. By
      default, all metadata is indexed; when `metadata_config` is present, only
      specified metadata fields are indexed. These configurations are only valid
      for use with pod-based indexes.
    properties:
      indexed:
        type: optional<list<string>>
        docs: >-
          By default, all metadata is indexed; to change this behavior, use this
          property to specify an array of metadata fields that should be
          indexed.
    source:
      openapi: ../control-plane/openapi/openapi.yml
    inline: true
  PodSpec:
    docs: Configuration needed to deploy a pod-based index.
    properties:
      environment:
        type: string
        docs: The environment where the index is hosted.
      replicas:
        type: optional<integer>
        docs: >-
          The number of replicas. Replicas duplicate your index. They provide
          higher availability and throughput. Replicas can be scaled up or down
          as your needs change.
        default: 1
        validation:
          min: 1
      shards:
        type: optional<integer>
        docs: >-
          The number of shards. Shards split your data across multiple pods so
          you can fit more data into an index.
        default: 1
        validation:
          min: 1
      pod_type:
        type: string
        docs: >-
          The type of pod to use. One of `s1`, `p1`, or `p2` appended with `.`
          and one of `x1`, `x2`, `x4`, or `x8`.
        default: p1.x1
      pods:
        type: optional<integer>
        docs: >-
          The number of pods to be used in the index. This should be equal to
          `shards` x `replicas`.'
        default: 1
        validation:
          min: 1
      metadata_config:
        type: optional<PodSpecMetadataConfig>
        docs: >-
          Configuration for the behavior of Pinecone's internal metadata index.
          By default, all metadata is indexed; when `metadata_config` is
          present, only specified metadata fields are indexed. These
          configurations are only valid for use with pod-based indexes.
      source_collection:
        type: optional<string>
        docs: The name of the collection to be used as the source for the index.
    source:
      openapi: ../control-plane/openapi/openapi.yml
  DeletionProtection:
    enum:
      - disabled
      - enabled
    docs: >
      Whether [deletion
      protection](http://docs.pinecone.io/guides/indexes/prevent-index-deletion)
      is enabled/disabled for the index.
    default: disabled
    source:
      openapi: ../control-plane/openapi/openapi.yml
  CollectionModelStatus:
    enum:
      - Initializing
      - Ready
      - Terminating
    docs: The status of the collection.
    inline: true
    source:
      openapi: ../control-plane/openapi/openapi.yml
  CollectionModel:
    docs: >-
      The CollectionModel describes the configuration and status of a Pinecone
      collection.
    properties:
      name:
        type: string
        docs: The name of the collection.
      size:
        type: optional<long>
        docs: The size of the collection in bytes.
      status:
        type: CollectionModelStatus
        docs: The status of the collection.
      dimension:
        type: optional<integer>
        docs: >-
          The dimension of the vectors stored in each record held in the
          collection.
        validation:
          min: 1
          max: 20000
      vector_count:
        type: optional<integer>
        docs: The number of records stored in the collection.
      environment:
        type: string
        docs: The environment where the collection is hosted.
    source:
      openapi: ../control-plane/openapi/openapi.yml
  ServerlessIndexSpec:
    properties:
      serverless: ServerlessSpec
    source:
      openapi: ../control-plane/openapi/openapi.yml
  PodIndexSpec:
    properties:
      pod: PodSpec
    source:
      openapi: ../control-plane/openapi/openapi.yml
  IndexStatus: unknown
  IndexStatusState: unknown
  VectorType:
    enum:
      - dense
      - sparse
    docs: Indicates whether this is a 'dense' or 'sparse' embedding.
    source:
      openapi: ../inference/openapi/openapi.yml
  ErrorResponseErrorCode:
    enum:
      - OK
      - UNKNOWN
      - INVALID_ARGUMENT
      - DEADLINE_EXCEEDED
      - QUOTA_EXCEEDED
      - NOT_FOUND
      - ALREADY_EXISTS
      - PERMISSION_DENIED
      - UNAUTHENTICATED
      - RESOURCE_EXHAUSTED
      - FAILED_PRECONDITION
      - ABORTED
      - OUT_OF_RANGE
      - UNIMPLEMENTED
      - INTERNAL
      - UNAVAILABLE
      - DATA_LOSS
      - FORBIDDEN
      - UNPROCESSABLE_ENTITY
      - PAYMENT_REQUIRED
      - TOO_MANY_REQUESTS
    source:
      openapi: ../metrics/openapi/openapi.yml
  ErrorResponseError:
    docs: Detailed information about the error that occurred.
    properties:
      code: ErrorResponseErrorCode
      message: string
      details:
        type: optional<map<string, unknown>>
        docs: >-
          Additional information about the error. This field is not guaranteed
          to be present.
    source:
      openapi: ../metrics/openapi/openapi.yml
  ImportErrorModeOnError:
    enum:
      - abort
      - continue
    docs: Indicates how to respond to errors during the import process.
    inline: true
    source:
      openapi: ../data-plane/openapi/openapi.yml
  ImportErrorMode:
    docs: Indicates how to respond to errors during the import process.
    properties:
      onError:
        type: optional<ImportErrorModeOnError>
        docs: Indicates how to respond to errors during the import process.
    source:
      openapi: ../data-plane/openapi/openapi.yml
  StartImportResponse:
    docs: The response for the `start_import` operation.
    properties:
      id:
        type: optional<string>
        docs: Unique identifier for the import operation.
        validation:
          minLength: 1
          maxLength: 1000
    source:
      openapi: ../data-plane/openapi/openapi.yml
  CancelImportResponse:
    docs: The response for the `cancel_import` operation.
    properties: {}
    source:
      openapi: ../data-plane/openapi/openapi.yml
  ImportModelStatus:
    enum:
      - Pending
      - InProgress
      - Failed
      - Completed
      - Cancelled
    docs: The status of the operation.
    inline: true
    source:
      openapi: ../data-plane/openapi/openapi.yml
  ImportModel:
    docs: The model for an import operation.
    properties:
      id:
        type: optional<string>
        docs: Unique identifier for the import operation.
        validation:
          minLength: 1
          maxLength: 1000
      uri:
        type: optional<string>
        docs: The URI from where the data is imported.
      status:
        type: optional<ImportModelStatus>
        docs: The status of the operation.
      createdAt:
        type: optional<datetime>
        docs: The start time of the import operation.
      finishedAt:
        type: optional<datetime>
        docs: The end time of the import operation.
      percentComplete:
        type: optional<float>
        docs: The progress made by the operation, as a percentage.
      recordsImported:
        type: optional<long>
        docs: The number of records successfully imported.
      error:
        type: optional<string>
        docs: The error message if the import process failed.
    source:
      openapi: ../data-plane/openapi/openapi.yml
  ListImportsResponse:
    docs: The response for the `list_imports` operation.
    properties:
      data: optional<list<ImportModel>>
      pagination: optional<Pagination>
    source:
      openapi: ../data-plane/openapi/openapi.yml
  Pagination:
    properties:
      next: optional<string>
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  UpsertRecord:
    docs: The request for the `upsert` operation.
    properties:
      _id:
        type: string
        docs: The unique ID of the record to upsert.
    extra-properties: true
    source:
      openapi: ../data-plane/openapi/openapi.yml
  SearchRecordsResponseResult:
    properties:
      hits:
        docs: The hits for the search document request.
        type: list<Hit>
    source:
      openapi: ../data-plane/openapi/openapi.yml
    inline: true
  SearchRecordsResponse:
    docs: The records search response.
    properties:
      result: SearchRecordsResponseResult
      usage: SearchUsage
    source:
      openapi: ../data-plane/openapi/openapi.yml
  Hit:
    docs: A record whose vector values are similar to the provided search query.
    properties:
      _id:
        type: string
        docs: The record id of the search hit.
      _score:
        type: float
        docs: The similarity score of the returned record.
      fields:
        type: map<string, unknown>
        docs: The selected record fields associated with the search hit.
    source:
      openapi: ../data-plane/openapi/openapi.yml
  SearchUsage:
    properties:
      read_units:
        type: integer
        docs: The number of read units consumed by this operation.
        validation:
          min: 0
      embed_total_tokens:
        type: optional<integer>
        docs: The number of embedding tokens consumed by this operation.
        validation:
          min: 0
      rerank_units:
        type: optional<integer>
        docs: The number of rerank units consumed by this operation.
        validation:
          min: 0
    source:
      openapi: ../data-plane/openapi/openapi.yml
  EmbedInputs: map<string, unknown>
  VectorValues:
    docs: This is the vector data included in the request.
    type: list<float>
  SearchVector:
    properties:
      values: optional<VectorValues>
    source:
      openapi: ../data-plane/openapi/openapi.yml
  SearchRecordsVector:
    properties:
      values: optional<VectorValues>
      sparse_values:
        type: optional<list<float>>
        docs: The sparse embedding values.
      sparse_indices:
        type: optional<list<integer>>
        docs: The sparse embedding indices.
    source:
      openapi: ../data-plane/openapi/openapi.yml
  SearchRequest: unknown
  Document:
    type: map<string, unknown>
    docs: Document for reranking
  RerankResultUsage:
    docs: Usage statistics for the model inference.
    properties:
      rerank_units:
        type: optional<integer>
        docs: The number of rerank units consumed by this operation.
        validation:
          min: 0
    source:
      openapi: ../inference/openapi/openapi.yml
    inline: true
  RerankResult:
    docs: The result of a reranking request.
    properties:
      model:
        type: string
        docs: The model used to rerank documents.
      data:
        docs: The reranked documents.
        type: list<RankedDocument>
      usage:
        type: RerankResultUsage
        docs: Usage statistics for the model inference.
    source:
      openapi: ../inference/openapi/openapi.yml
  DenseEmbedding:
    docs: A dense embedding of a single input
    properties:
      values:
        docs: The dense embedding values.
        type: list<float>
      vector_type: VectorType
    source:
      openapi: ../inference/openapi/openapi.yml
  EmbeddingsListUsage:
    docs: Usage statistics for the model inference.
    properties:
      total_tokens:
        type: optional<integer>
        docs: Total number of tokens consumed across all inputs.
        validation:
          min: 0
    source:
      openapi: ../inference/openapi/openapi.yml
    inline: true
  EmbeddingsList:
    docs: Embeddings generated for the input.
    properties:
      model:
        type: string
        docs: The model used to generate the embeddings
      vector_type:
        type: VectorType
        docs: >-
          Indicates whether the response data contains 'dense' or 'sparse'
          embeddings.
      data:
        docs: The embeddings generated for the inputs.
        type: list<Embedding>
      usage:
        type: EmbeddingsListUsage
        docs: Usage statistics for the model inference.
    source:
      openapi: ../inference/openapi/openapi.yml
  SparseEmbedding:
    docs: A sparse embedding of a single input
    properties:
      sparse_values:
        docs: The sparse embedding values.
        type: list<float>
      sparse_indices:
        docs: The sparse embedding indices.
        type: list<integer>
      sparse_tokens:
        type: optional<list<string>>
        docs: The normalized tokens used to create the sparse embedding.
      vector_type: VectorType
    source:
      openapi: ../inference/openapi/openapi.yml
  RankedDocument:
    docs: A ranked document with a relevance score and an index position.
    properties:
      index:
        type: integer
        docs: The index position of the document from the original request.
      score:
        type: double
        docs: >-
          The relevance of the document to the query, normalized between 0 and
          1, with scores closer to 1 indicating higher relevance.
      document: optional<Document>
    source:
      openapi: ../inference/openapi/openapi.yml
  Embedding:
    docs: Embedding of a single input
    properties:
      values:
        type: optional<list<float>>
        docs: The dense embedding values.
      sparse_values:
        type: optional<list<float>>
        docs: The sparse embedding values.
      sparse_indices:
        type: optional<list<integer>>
        docs: The sparse embedding indices.
      sparse_tokens:
        type: optional<list<string>>
        docs: The normalized tokens used to create the sparse embedding.
    source:
      openapi: ../inference/openapi/openapi.yml
  DeleteResponse:
    docs: The response for the `Delete` operation.
    properties: {}
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  DescribeIndexStatsResponse:
    docs: The response for the `describe_index_stats` operation.
    properties:
      namespaces:
        type: optional<map<string, NamespaceSummary>>
        docs: |-
          A mapping for each namespace in the index from the namespace name to a
           summary of its contents. If a metadata filter expression is present, the
           summary will reflect only vectors matching that expression.
      dimension:
        type: optional<uint>
        docs: The dimension of the indexed vectors. Not specified if `sparse` index.
      indexFullness:
        type: optional<float>
        docs: >-
          The fullness of the index, regardless of whether a metadata filter
          expression was passed. The granularity of this metric is 10%.

           Serverless indexes scale automatically as needed, so index fullness is relevant only for pod-based indexes.

           The index fullness result may be inaccurate during pod resizing; to get the status of a pod resizing process, use [`describe_index`](https://docs.pinecone.io/reference/api/2024-04/control-plane/describe_index).
      totalVectorCount:
        type: optional<uint>
        docs: >-
          The total number of vectors in the index, regardless of whether a
          metadata filter expression was passed
      metric:
        type: optional<string>
        docs: The metric of the index.
      vectorType:
        type: optional<string>
        docs: The type of the vector the index supports.
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  FetchResponse:
    docs: The response for the `fetch` operation.
    properties:
      vectors:
        type: optional<map<string, Vector>>
        docs: >-
          The fetched vectors, in the form of a map between the fetched ids and
          the fetched vectors
      namespace:
        type: optional<string>
        docs: The namespace of the vectors.
      usage:
        type: optional<Usage>
        docs: The usage for this operation.
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  FieldBehavior:
    enum:
      - FIELD_BEHAVIOR_UNSPECIFIED
      - OPTIONAL
      - REQUIRED
      - OUTPUT_ONLY
      - INPUT_ONLY
      - IMMUTABLE
      - UNORDERED_LIST
      - NON_EMPTY_DEFAULT
      - IDENTIFIER
    source:
      proto: ../vector-service/proto/google/api/field_behavior.proto
  ListItem:
    properties:
      id: optional<string>
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  ListResponse:
    docs: The response for the `List` operation.
    properties:
      vectors:
        type: optional<list<ListItem>>
        docs: A list of ids
      pagination:
        type: optional<Pagination>
        docs: Pagination token to continue past this listing
      namespace:
        type: optional<string>
        docs: The namespace of the vectors.
      usage:
        type: optional<Usage>
        docs: The usage for this operation.
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  NamespaceSummary:
    docs: A summary of the contents of a namespace.
    properties:
      vectorCount:
        type: optional<uint>
        docs: >-
          The number of vectors stored in this namespace. Note that updates to
          this field may lag behind updates to the
           underlying index and corresponding query results, etc.
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  QueryResponse:
    docs: >-
      The response for the `query` operation. These are the matches found for a
      particular query vector. The matches are ordered from most similar to
      least similar.
    properties:
      results:
        type: optional<list<SingleQueryResults>>
        docs: >-
          DEPRECATED. The results of each query. The order is the same as
          `QueryRequest.queries`.
      matches:
        type: optional<list<ScoredVector>>
        docs: The matches for the vectors.
      namespace:
        type: optional<string>
        docs: The namespace for the vectors.
      usage:
        type: optional<Usage>
        docs: The usage for this operation.
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  QueryVector:
    docs: A single query vector within a `QueryRequest`.
    properties:
      values:
        type: optional<list<float>>
        docs: >-
          The query vector. This should be the same length as the dimension of
          the index being queried. Each `query()` request can contain only one
          of the parameters `id` or `vector`.
      sparseValues:
        type: optional<SparseValues>
        docs: The query sparse values.
      topK:
        type: optional<uint>
        docs: An override for the number of results to return for this query vector.
      namespace:
        type: optional<string>
        docs: An override the namespace to search.
      filter:
        type: optional<Metadata>
        docs: >-
          An override for the metadata filter to apply. This replaces the
          request-level filter.
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  ScoredVector:
    properties:
      id:
        type: string
        docs: This is the vector's unique id.
      score:
        type: optional<float>
        docs: >-
          This is a measure of similarity between this vector and the query
          vector.  The higher the score, the more they are similar.
      values:
        type: optional<list<float>>
        docs: This is the vector data, if it is requested.
      sparseValues:
        type: optional<SparseValues>
        docs: This is the sparse data, if it is requested.
      metadata:
        type: optional<Metadata>
        docs: This is the metadata, if it is requested.
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  SingleQueryResults:
    docs: The query results for a single `QueryVector`
    properties:
      matches:
        type: optional<list<ScoredVector>>
        docs: The matches for the vectors.
      namespace:
        type: optional<string>
        docs: The namespace for the vectors.
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  SparseValues:
    properties:
      indices: list<uint>
      values: list<float>
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  UpdateResponse:
    docs: The response for the `update` operation.
    properties: {}
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  UpsertResponse:
    docs: The response for the `upsert` operation.
    properties:
      upsertedCount:
        type: optional<uint>
        docs: The number of vectors upserted.
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  Usage:
    properties:
      readUnits:
        type: optional<uint>
        docs: The number of read units consumed by this operation.
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  Vector:
    properties:
      id:
        type: string
        docs: This is the vector's unique id.
      values:
        type: optional<list<float>>
        docs: This is the vector data included in the request.
      sparseValues:
        type: optional<SparseValues>
        docs: >-
          This is the sparse data included in the request. Can only be specified
          if `sparse` index.
      metadata:
        type: optional<Metadata>
        docs: This is the metadata included in the request.
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  Metadata:
    discriminated: false
    union:
      - map<string, optional<MetadataValue>>
      - string
    encoding:
      proto:
        type: google.protobuf.Struct
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  MetadataValue:
    discriminated: false
    union:
      - double
      - string
      - boolean
    encoding:
      proto:
        type: google.protobuf.Value
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
