types:
  CancelImportResponse:
    docs: The response for the `cancel_import` operation.
    properties: {}
    source:
      openapi: ../data-plane/openapi/openapi.yml
  CollectionList:
    docs: The list of collections that exist in the project.
    properties:
      collections: optional<list<CollectionModel>>
    source:
      openapi: ../control-plane/openapi/openapi.yml
  CollectionModel:
    docs: >-
      The CollectionModel describes the configuration and status of a Pinecone
      collection.
    properties:
      dimension:
        docs: >-
          The dimension of the vectors stored in each record held in the
          collection.
        type: optional<integer>
        validation:
          max: 20000
          min: 1
      environment:
        docs: The environment where the collection is hosted.
        type: string
      name:
        docs: The name of the collection.
        type: string
      size:
        docs: The size of the collection in bytes.
        type: optional<long>
      status:
        docs: The status of the collection.
        type: CollectionModelStatus
      vector_count:
        docs: The number of records stored in the collection.
        type: optional<integer>
    source:
      openapi: ../control-plane/openapi/openapi.yml
  CollectionModelStatus:
    docs: The status of the collection.
    enum:
      - Initializing
      - Ready
      - Terminating
    source:
      openapi: ../control-plane/openapi/openapi.yml
  ConfigureIndexRequestSpec:
    properties:
      pod: ConfigureIndexRequestSpecPod
    source:
      openapi: ../control-plane/openapi/openapi.yml
  ConfigureIndexRequestSpecPod:
    properties:
      pod_type:
        default: p1.x1
        docs: >-
          The type of pod to use. One of `s1`, `p1`, or `p2` appended with `.`
          and one of `x1`, `x2`, `x4`, or `x8`.
        type: optional<string>
      replicas:
        default: 1
        docs: >-
          The number of replicas. Replicas duplicate your index. They provide
          higher availability and throughput. Replicas can be scaled up or down
          as your needs change.
        type: optional<integer>
        validation:
          min: 1
    source:
      openapi: ../control-plane/openapi/openapi.yml
  CreateIndexRequestMetric:
    default: cosine
    docs: >-
      The distance metric to be used for similarity search. You can use
      'euclidean', 'cosine', or 'dotproduct'.
    enum:
      - cosine
      - euclidean
      - dotproduct
    source:
      openapi: ../control-plane/openapi/openapi.yml
  DeleteResponse:
    docs: The response for the `Delete` operation.
    properties: {}
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  DeletionProtection:
    default: disabled
    docs: >
      Whether [deletion
      protection](http://docs.pinecone.io/guides/indexes/prevent-index-deletion)
      is enabled/disabled for the index.
    enum:
      - disabled
      - enabled
    source:
      openapi: ../control-plane/openapi/openapi.yml
  DescribeIndexStatsResponse:
    docs: The response for the `describe_index_stats` operation.
    properties:
      dimension:
        docs: The dimension of the indexed vectors.
        type: optional<uint>
      indexFullness:
        docs: >-
          The fullness of the index, regardless of whether a metadata filter
          expression was passed. The granularity of this metric is 10%.

           Serverless indexes scale automatically as needed, so index fullness is relevant only for pod-based indexes.

           The index fullness result may be inaccurate during pod resizing; to get the status of a pod resizing process, use [`describe_index`](https://docs.pinecone.io/reference/api/control-plane/describe_index).
        type: optional<float>
      namespaces:
        docs: |-
          A mapping for each namespace in the index from the namespace name to a
           summary of its contents. If a metadata filter expression is present, the
           summary will reflect only vectors matching that expression.
        type: optional<map<string, NamespaceSummary>>
      totalVectorCount:
        docs: >-
          The total number of vectors in the index, regardless of whether a
          metadata filter expression was passed
        type: optional<uint>
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  Document:
    docs: Document for reranking
    type: map<string, string>
  Embedding:
    docs: Embedding of a single input
    properties:
      values:
        docs: The embedding values.
        type: optional<list<double>>
    source:
      openapi: ../inference/openapi/openapi.yml
  EmbeddingsList:
    docs: Embeddings generated for the input
    properties:
      data:
        docs: The embeddings generated for the inputs.
        type: list<Embedding>
      model:
        docs: The model used to generate the embeddings
        type: string
      usage:
        docs: Usage statistics for the model inference.
        type: EmbeddingsListUsage
    source:
      openapi: ../inference/openapi/openapi.yml
  EmbeddingsListUsage:
    docs: Usage statistics for the model inference.
    properties:
      total_tokens:
        docs: Total number of tokens consumed across all inputs.
        type: optional<integer>
    source:
      openapi: ../inference/openapi/openapi.yml
  ErrorResponse:
    docs: The response shape used for all error responses.
    properties:
      error:
        docs: Detailed information about the error that occurred.
        type: ErrorResponseError
      status:
        docs: The HTTP status code of the error.
        type: integer
    source:
      openapi: ../inference/openapi/openapi.yml
  ErrorResponseError:
    docs: Detailed information about the error that occurred.
    properties:
      code: ErrorResponseErrorCode
      details:
        docs: >-
          Additional information about the error. This field is not guaranteed
          to be present.
        type: optional<map<string, unknown>>
      message: string
    source:
      openapi: ../inference/openapi/openapi.yml
  ErrorResponseErrorCode:
    enum:
      - OK
      - UNKNOWN
      - INVALID_ARGUMENT
      - DEADLINE_EXCEEDED
      - QUOTA_EXCEEDED
      - NOT_FOUND
      - ALREADY_EXISTS
      - PERMISSION_DENIED
      - UNAUTHENTICATED
      - RESOURCE_EXHAUSTED
      - FAILED_PRECONDITION
      - ABORTED
      - OUT_OF_RANGE
      - UNIMPLEMENTED
      - INTERNAL
      - UNAVAILABLE
      - DATA_LOSS
      - FORBIDDEN
      - UNPROCESSABLE_ENTITY
      - PAYMENT_REQUIRED
    source:
      openapi: ../inference/openapi/openapi.yml
  FetchResponse:
    docs: The response for the `fetch` operation.
    properties:
      namespace:
        docs: The namespace of the vectors.
        type: optional<string>
      usage:
        docs: The usage for this operation.
        type: optional<Usage>
      vectors:
        docs: >-
          The fetched vectors, in the form of a map between the fetched ids and
          the fetched vectors
        type: optional<map<string, Vector>>
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  ImportErrorMode:
    docs: Indicates how to respond to errors during the import process.
    properties:
      onError:
        docs: Indicates how to respond to errors during the import process.
        type: optional<ImportErrorModeOnError>
    source:
      openapi: ../data-plane/openapi/openapi.yml
  ImportErrorModeOnError:
    docs: Indicates how to respond to errors during the import process.
    enum:
      - abort
      - continue
    source:
      openapi: ../data-plane/openapi/openapi.yml
  ImportModel:
    docs: The model for an import operation.
    properties:
      createdAt:
        docs: The start time of the import operation.
        type: optional<datetime>
      error:
        docs: The error message if the import process failed.
        type: optional<string>
      finishedAt:
        docs: The end time of the import operation.
        type: optional<datetime>
      id:
        docs: Unique identifier for the import operation.
        type: optional<string>
        validation:
          maxLength: 1000
          minLength: 1
      percentComplete:
        docs: The progress made by the operation out of 100
        type: optional<float>
      recordsImported:
        docs: The number of records successfully imported.
        type: optional<long>
      status:
        docs: The status of the operation.
        type: optional<ImportModelStatus>
      uri:
        docs: The URI from where the data is imported.
        type: optional<string>
    source:
      openapi: ../data-plane/openapi/openapi.yml
  ImportModelStatus:
    docs: The status of the operation.
    enum:
      - Pending
      - InProgress
      - Failed
      - Completed
      - Cancelled
    source:
      openapi: ../data-plane/openapi/openapi.yml
  Index:
    docs: The IndexModel describes the configuration and status of a Pinecone index.
    properties:
      deletion_protection: optional<DeletionProtection>
      dimension:
        docs: The dimensions of the vectors to be inserted in the index.
        type: integer
        validation:
          max: 20000
          min: 1
      host:
        docs: The URL address where the index is hosted.
        type: string
      metric:
        default: cosine
        docs: >-
          The distance metric to be used for similarity search. You can use
          'euclidean', 'cosine', or 'dotproduct'.
        type: IndexModelMetric
      name:
        docs: >
          The name of the index. Resource name must be 1-45 characters long,
          start and end with an alphanumeric character, and consist only of
          lower case alphanumeric characters or '-'.
        type: string
        validation:
          maxLength: 45
          minLength: 1
      spec: IndexSpec
      status: IndexModelStatus
      tags: optional<IndexTags>
    source:
      openapi: ../control-plane/openapi/openapi.yml
  IndexList:
    docs: The list of indexes that exist in the project.
    properties:
      indexes: optional<list<Index>>
    source:
      openapi: ../control-plane/openapi/openapi.yml
  IndexModelMetric:
    default: cosine
    docs: >-
      The distance metric to be used for similarity search. You can use
      'euclidean', 'cosine', or 'dotproduct'.
    enum:
      - cosine
      - euclidean
      - dotproduct
    source:
      openapi: ../control-plane/openapi/openapi.yml
  IndexModelStatus:
    properties:
      ready: boolean
      state: IndexModelStatusState
    source:
      openapi: ../control-plane/openapi/openapi.yml
  IndexModelStatusState:
    enum:
      - Initializing
      - InitializationFailed
      - ScalingUp
      - ScalingDown
      - ScalingUpPodSize
      - ScalingDownPodSize
      - Terminating
      - Ready
    source:
      openapi: ../control-plane/openapi/openapi.yml
  IndexSpec:
    discriminated: false
    docs: >
      The spec object defines how the index should be deployed.


      For serverless indexes, you define only the cloud and region where the
      index should be hosted. For pod-based indexes, you define the environment
      where the index should be hosted, the pod type and size to use, and other
      index characteristics.
    source:
      openapi: ../control-plane/openapi/openapi.yml
    union:
      - ServerlessIndexSpec
      - PodIndexSpec
  IndexStatus: unknown
  IndexStatusState: unknown
  IndexTags:
    docs: >-
      Custom user tags added to an index. Keys must be alphanumeric and 80
      characters or less. Values must be 120 characters or less.
    type: optional<map<string, optional<string>>>
  ListImportsResponse:
    docs: The response for the `list_imports` operation.
    properties:
      data: optional<list<ImportModel>>
      pagination: optional<Pagination>
    source:
      openapi: ../data-plane/openapi/openapi.yml
  ListItem:
    properties:
      id: optional<string>
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  ListResponse:
    docs: The response for the `List` operation.
    properties:
      namespace:
        docs: The namespace of the vectors.
        type: optional<string>
      pagination:
        docs: Pagination token to continue past this listing
        type: optional<Pagination>
      usage:
        docs: The usage for this operation.
        type: optional<Usage>
      vectors:
        docs: A list of ids
        type: optional<list<ListItem>>
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  Metadata:
    discriminated: false
    encoding:
      proto:
        type: google.protobuf.Struct
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
    union:
      - map<string, optional<MetadataValue>>
      - string
  MetadataValue:
    discriminated: false
    encoding:
      proto:
        type: google.protobuf.Value
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
    union:
      - double
      - string
      - boolean
  NamespaceSummary:
    docs: A summary of the contents of a namespace.
    properties:
      vectorCount:
        docs: >-
          The number of vectors stored in this namespace. Note that updates to
          this field may lag behind updates to the
           underlying index and corresponding query results, etc.
        type: optional<uint>
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  Pagination:
    properties:
      next: optional<string>
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  PodIndexSpec:
    properties:
      pod: PodSpec
    source:
      openapi: ../control-plane/openapi/openapi.yml
  PodSpec:
    docs: Configuration needed to deploy a pod-based index.
    properties:
      environment:
        docs: The environment where the index is hosted.
        type: string
      metadata_config:
        docs: >-
          Configuration for the behavior of Pinecone's internal metadata index.
          By default, all metadata is indexed; when `metadata_config` is
          present, only specified metadata fields are indexed. These
          configurations are only valid for use with pod-based indexes.
        type: optional<PodSpecMetadataConfig>
      pod_type:
        default: p1.x1
        docs: >-
          The type of pod to use. One of `s1`, `p1`, or `p2` appended with `.`
          and one of `x1`, `x2`, `x4`, or `x8`.
        type: string
      pods:
        default: 1
        docs: >-
          The number of pods to be used in the index. This should be equal to
          `shards` x `replicas`.'
        type: integer
        validation:
          min: 1
      replicas:
        default: 1
        docs: >-
          The number of replicas. Replicas duplicate your index. They provide
          higher availability and throughput. Replicas can be scaled up or down
          as your needs change.
        type: integer
        validation:
          min: 1
      shards:
        default: 1
        docs: >-
          The number of shards. Shards split your data across multiple pods so
          you can fit more data into an index.
        type: integer
        validation:
          min: 1
      source_collection:
        docs: The name of the collection to be used as the source for the index.
        type: optional<string>
    source:
      openapi: ../control-plane/openapi/openapi.yml
  PodSpecMetadataConfig:
    docs: >-
      Configuration for the behavior of Pinecone's internal metadata index. By
      default, all metadata is indexed; when `metadata_config` is present, only
      specified metadata fields are indexed. These configurations are only valid
      for use with pod-based indexes.
    properties:
      indexed:
        docs: >-
          By default, all metadata is indexed; to change this behavior, use this
          property to specify an array of metadata fields that should be
          indexed.
        type: optional<list<string>>
    source:
      openapi: ../control-plane/openapi/openapi.yml
  QueryResponse:
    docs: >-
      The response for the `query` operation. These are the matches found for a
      particular query vector. The matches are ordered from most similar to
      least similar.
    properties:
      matches:
        docs: The matches for the vectors.
        type: optional<list<ScoredVector>>
      namespace:
        docs: The namespace for the vectors.
        type: optional<string>
      results:
        docs: >-
          DEPRECATED. The results of each query. The order is the same as
          `QueryRequest.queries`.
        type: optional<list<SingleQueryResults>>
      usage:
        docs: The usage for this operation.
        type: optional<Usage>
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  QueryVector:
    docs: A single query vector within a `QueryRequest`.
    properties:
      filter:
        docs: >-
          An override for the metadata filter to apply. This replaces the
          request-level filter.
        type: optional<Metadata>
      namespace:
        docs: An override the namespace to search.
        type: optional<string>
      sparseValues:
        docs: The query sparse values.
        type: optional<SparseValues>
      topK:
        docs: An override for the number of results to return for this query vector.
        type: optional<uint>
      values:
        docs: >-
          The query vector values. This should be the same length as the
          dimension of the index being queried.
        type: list<float>
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  RankedDocument:
    docs: A ranked document with a relevance score and an index position.
    properties:
      document: optional<Document>
      index:
        docs: The index of the document
        type: integer
      score:
        docs: 'The relevance score of the document normalized between 0 and 1. '
        type: double
    source:
      openapi: ../inference/openapi/openapi.yml
  RerankResult:
    docs: The result of a reranking request.
    properties:
      data:
        docs: The reranked documents.
        type: list<RankedDocument>
      model:
        docs: The model used to rerank documents.
        type: string
      usage:
        docs: Usage statistics for the model inference.
        type: RerankResultUsage
    source:
      openapi: ../inference/openapi/openapi.yml
  RerankResultUsage:
    docs: Usage statistics for the model inference.
    properties:
      rerank_units: optional<integer>
    source:
      openapi: ../inference/openapi/openapi.yml
  ScoredVector:
    properties:
      id:
        docs: This is the vector's unique id.
        type: string
      metadata:
        docs: This is the metadata, if it is requested.
        type: optional<Metadata>
      score:
        docs: >-
          This is a measure of similarity between this vector and the query
          vector. The higher the score, the more they are similar.
        type: optional<float>
      sparseValues:
        docs: This is the sparse data, if it is requested.
        type: optional<SparseValues>
      values:
        docs: This is the vector data, if it is requested.
        type: optional<list<float>>
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  ServerlessIndexSpec:
    properties:
      serverless: ServerlessSpec
    source:
      openapi: ../control-plane/openapi/openapi.yml
  ServerlessSpec:
    docs: Configuration needed to deploy a serverless index.
    properties:
      cloud:
        docs: The public cloud where you would like your index hosted.
        type: ServerlessSpecCloud
      region:
        docs: 'The region where you would like your index to be created. '
        type: string
    source:
      openapi: ../control-plane/openapi/openapi.yml
  ServerlessSpecCloud:
    docs: The public cloud where you would like your index hosted.
    enum:
      - gcp
      - aws
      - azure
    source:
      openapi: ../control-plane/openapi/openapi.yml
  SingleQueryResults:
    docs: The query results for a single `QueryVector`
    properties:
      matches:
        docs: The matches for the vectors.
        type: optional<list<ScoredVector>>
      namespace:
        docs: The namespace for the vectors.
        type: optional<string>
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  SparseValues:
    properties:
      indices: list<uint>
      values: list<float>
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  StartImportResponse:
    docs: The response for the `start_import` operation.
    properties:
      id:
        docs: Unique identifier for the import operations.
        type: optional<string>
        validation:
          maxLength: 1000
          minLength: 1
    source:
      openapi: ../data-plane/openapi/openapi.yml
  UpdateResponse:
    docs: The response for the `update` operation.
    properties: {}
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  UpsertResponse:
    docs: The response for the `upsert` operation.
    properties:
      upsertedCount:
        docs: The number of vectors upserted.
        type: optional<uint>
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  Usage:
    properties:
      readUnits:
        docs: The number of read units consumed by this operation.
        type: optional<uint>
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
  Vector:
    properties:
      id:
        docs: This is the vector's unique id.
        type: string
      metadata:
        docs: This is the metadata included in the request.
        type: optional<Metadata>
      sparseValues: optional<SparseValues>
      values:
        docs: This is the vector data included in the request.
        type: list<float>
    source:
      proto: ../vector-service/proto/pinecone/data/v1/vector_service.proto
errors:
  BadRequestError:
    docs: Bad request. The request body included invalid request parameters.
    examples:
      - name: Validation error on metric.
        value:
          error:
            code: INVALID_ARGUMENT
            message: Metric must be cosine, euclidean, or dotproduct.
          status: 400
      - name: Validation error
        value:
          error:
            code: INVALID_ARGUMENT
            message: Bad request. The request body included invalid request parameters.
          status: 400
    status-code: 400
    type: ErrorResponse
  ConflictError:
    docs: Index of given name already exists.
    examples:
      - name: Index name needs to be unique.
        value:
          error:
            code: ALREADY_EXISTS
            message: Resource already exists.
          status: 409
      - name: Collection name needs to be unique.
        value:
          error:
            code: ALREADY_EXISTS
            message: Resource already exists.
          status: 409
    status-code: 409
    type: ErrorResponse
  ForbiddenError:
    docs: You've exceed your pod quota.
    examples:
      - name: Forbidden
        value:
          error:
            code: FORBIDDEN
            message: Increase your quota or upgrade to create more indexes.
          status: 403
      - name: Forbidden
        value:
          error:
            code: FORBIDDEN
            message: >-
              Collection exceeds quota. Maximum allowed on your account is 1.
              Currently have 1.
          status: 403
    status-code: 403
    type: ErrorResponse
  InternalServerError:
    docs: Internal server error.
    examples:
      - name: Internal server error
        value:
          error:
            code: UNKNOWN
            message: Internal server error
          status: 500
    status-code: 500
    type: ErrorResponse
  NotFoundError:
    docs: Unknown cloud or region when creating a serverless index.
    examples:
      - name: Cannot create serverless index with invalid spec.
        value:
          error:
            code: NOT_FOUND
            message: 'Resource cloud: aws region: us-west1 not found.'
          status: 404
      - name: Index not found
        value:
          error:
            code: NOT_FOUND
            message: Index example-index not found.
          status: 404
      - name: Collection not found.
        value:
          error:
            code: NOT_FOUND
            message: Collection example-collection not found.
          status: 404
    status-code: 404
    type: ErrorResponse
  PaymentRequiredError:
    docs: >-
      Payment required. Organization is on a paid plan and is delinquent on
      payment.
    examples:
      - name: Payment required
        value:
          error:
            code: PAYMENT_REQUIRED
            message: >-
              Request failed. Pay all past due invoices to lift restrictions on
              your account.
          status: 402
    status-code: 402
    type: ErrorResponse
  PreconditionFailedError:
    docs: There is a pending collection created from this index.
    examples:
      - name: There is a pending collection from this index.
        value:
          error:
            code: FAILED_PRECONDITION
            message: >-
              Unable to delete an index. There are pending collections for this
              index: ['test-collection']
          status: 412
    status-code: 412
    type: ErrorResponse
  UnauthorizedError:
    docs: 'Unauthorized. Possible causes: Invalid API key.'
    examples:
      - name: Unauthorized
        value:
          error:
            code: UNAUTHENTICATED
            message: Invalid API key.
          status: 401
    status-code: 401
    type: ErrorResponse
  UnprocessableEntityError:
    docs: Unprocessable entity. The request body could not be deserialized.
    examples:
      - name: Unprocessable entity
        value:
          error:
            code: UNPROCESSABLE_ENTITY
            message: >-
              Failed to deserialize the JSON body into the target type: missing
              field `metric` at line 1 column 16
          status: 422
    status-code: 422
    type: ErrorResponse
service:
  auth: false
  base-path: ''
  endpoints:
    configure_index:
      auth: true
      display-name: Configure an index
      docs: >-
        This operation configures an existing index. 


        For serverless indexes, you can configure only index deletion protection
        and tags. For pod-based indexes, you can configure the pod size, number
        of replicas, tags, and index deletion protection. 


        It is not possible to change the pod type of a pod-based index. However,
        you can create a collection from a pod-based index and then [create a
        new pod-based index with a different pod
        type](http://docs.pinecone.io/guides/indexes/create-an-index#create-an-index-from-a-collection)
        from the collection. For guidance and examples, see [Configure an
        index](http://docs.pinecone.io/guides/indexes/configure-an-index).
      errors:
        - BadRequestError
        - UnauthorizedError
        - PaymentRequiredError
        - ForbiddenError
        - NotFoundError
        - UnprocessableEntityError
        - InternalServerError
      examples:
        - name: Vertical scaling with pod size
          path-parameters:
            index_name: test-index
          request:
            spec:
              pod:
                pod_type: p1.x2
          response:
            body:
              deletion_protection: disabled
              dimension: 1536
              host: semantic-search-c01b5b5.svc.us-west1-gcp.pinecone.io
              metric: cosine
              name: example-index
              spec:
                serverless:
                  cloud: gcp
                  region: us-east-1
              status:
                ready: true
                state: ScalingUpPodSize
              tags:
                tag0: val0
                tag1: val1
        - name: Horizontal scaling with replicas
          path-parameters:
            index_name: test-index
          request:
            spec:
              pod:
                replicas: 4
          response:
            body:
              deletion_protection: disabled
              dimension: 1536
              host: semantic-search-c01b5b5.svc.us-west1-gcp.pinecone.io
              metric: cosine
              name: example-index
              spec:
                serverless:
                  cloud: gcp
                  region: us-east-1
              status:
                ready: true
                state: ScalingUpPodSize
              tags:
                tag0: val0
                tag1: val1
        - name: Scaling both pod size and number of replicas
          path-parameters:
            index_name: test-index
          request:
            spec:
              pod:
                pod_type: p1.x2
                replicas: 4
          response:
            body:
              deletion_protection: disabled
              dimension: 1536
              host: semantic-search-c01b5b5.svc.us-west1-gcp.pinecone.io
              metric: cosine
              name: example-index
              spec:
                serverless:
                  cloud: gcp
                  region: us-east-1
              status:
                ready: true
                state: ScalingUpPodSize
              tags:
                tag0: val0
                tag1: val1
        - name: Disable deletion protection for the index
          path-parameters:
            index_name: test-index
          request: {}
          response:
            body:
              deletion_protection: disabled
              dimension: 1536
              host: semantic-search-c01b5b5.svc.us-west1-gcp.pinecone.io
              metric: cosine
              name: example-index
              spec:
                serverless:
                  cloud: gcp
                  region: us-east-1
              status:
                ready: true
                state: ScalingUpPodSize
              tags:
                tag0: val0
                tag1: val1
        - name: Update tag0 and delete tag1
          path-parameters:
            index_name: test-index
          request:
            tags:
              tag0: new-val
              tag1: ''
          response:
            body:
              deletion_protection: disabled
              dimension: 1536
              host: semantic-search-c01b5b5.svc.us-west1-gcp.pinecone.io
              metric: cosine
              name: example-index
              spec:
                serverless:
                  cloud: gcp
                  region: us-east-1
              status:
                ready: true
                state: ScalingUpPodSize
              tags:
                tag0: val0
                tag1: val1
      method: PATCH
      path: /indexes/{index_name}
      path-parameters:
        index_name:
          docs: The name of the index to configure.
          type: string
      request:
        body:
          properties:
            deletion_protection: optional<DeletionProtection>
            spec: optional<ConfigureIndexRequestSpec>
            tags: optional<IndexTags>
        content-type: application/json
        name: ConfigureIndexRequest
      response:
        docs: >-
          The request to configure the index has been accepted. Check the  index
          status to see when the change has been applied.
        type: Index
    create_collection:
      auth: true
      display-name: Create a collection
      docs: |
        This operation creates a Pinecone collection.
          
        Serverless indexes do not support collections.
      errors:
        - BadRequestError
        - UnauthorizedError
        - PaymentRequiredError
        - ForbiddenError
        - ConflictError
        - UnprocessableEntityError
        - InternalServerError
      examples:
        - name: Creating a collection
          request:
            name: example-collection
            source: example-source-index
          response:
            body:
              dimension: 1536
              environment: us-east1-gcp
              name: example-collection
              size: 10000000
              status: Initializing
              vector_count: 120000
      method: POST
      path: /collections
      request:
        body:
          properties:
            name:
              docs: >
                The name of the collection to be created. Resource name must be
                1-45 characters long, start and end with an alphanumeric
                character, and consist only of lower case alphanumeric
                characters or '-'.
              type: string
              validation:
                maxLength: 45
                minLength: 1
            source:
              docs: >-
                The name of the index to be used as the source for the
                collection.
              type: string
        content-type: application/json
        name: CreateCollectionRequest
      response:
        docs: The collection has been successfully created.
        type: CollectionModel
    create_index:
      auth: true
      display-name: Create an index
      docs: >
        This operation deploys a Pinecone index. This is where you specify the
        measure of similarity, the dimension of vectors to be stored in the
        index, which cloud provider you would like to deploy with, and more.
          
        For guidance and examples, see [Create an
        index](https://docs.pinecone.io/guides/indexes/create-an-index#create-a-serverless-index).
      errors:
        - BadRequestError
        - UnauthorizedError
        - PaymentRequiredError
        - ForbiddenError
        - NotFoundError
        - ConflictError
        - UnprocessableEntityError
        - InternalServerError
      examples:
        - name: Creating a serverless index
          request:
            deletion_protection: enabled
            dimension: 1536
            metric: cosine
            name: movie-recommendations
            spec:
              serverless:
                cloud: gcp
                region: us-east1
          response:
            body:
              deletion_protection: disabled
              dimension: 1536
              host: semantic-search-c01b5b5.svc.us-west1-gcp.pinecone.io
              metric: cosine
              name: example-index
              spec:
                serverless:
                  cloud: gcp
                  region: us-east-1
              status:
                ready: true
                state: ScalingUpPodSize
              tags:
                tag0: val0
                tag1: val1
        - name: Creating a pod-based index
          request:
            deletion_protection: enabled
            dimension: 1536
            metric: cosine
            name: movie-recommendations
            spec:
              pod:
                environment: us-east-1-aws
                metadata_config:
                  indexed:
                    - genre
                    - title
                    - imdb_rating
                pod_type: p1.x1
                pods: 1
                replicas: 1
                shards: 1
                source_collection: movie-embeddings
          response:
            body:
              deletion_protection: disabled
              dimension: 1536
              host: semantic-search-c01b5b5.svc.us-west1-gcp.pinecone.io
              metric: cosine
              name: example-index
              spec:
                serverless:
                  cloud: gcp
                  region: us-east-1
              status:
                ready: true
                state: ScalingUpPodSize
              tags:
                tag0: val0
                tag1: val1
      method: POST
      path: /indexes
      request:
        body:
          properties:
            deletion_protection: optional<DeletionProtection>
            dimension:
              docs: The dimensions of the vectors to be inserted in the index.
              type: integer
              validation:
                max: 20000
                min: 1
            metric:
              default: cosine
              docs: >-
                The distance metric to be used for similarity search. You can
                use 'euclidean', 'cosine', or 'dotproduct'.
              type: optional<CreateIndexRequestMetric>
            name:
              docs: >
                The name of the index. Resource name must be 1-45 characters
                long, start and end with an alphanumeric character, and consist
                only of lower case alphanumeric characters or '-'.
              type: string
              validation:
                maxLength: 45
                minLength: 1
            spec: IndexSpec
            tags: optional<IndexTags>
        content-type: application/json
        name: CreateIndexRequest
      response:
        docs: The index has been successfully created.
        type: Index
    delete_collection:
      auth: true
      display-name: Delete a collection
      docs: |
        This operation deletes an existing collection.
        Serverless indexes do not support collections.
      errors:
        - UnauthorizedError
        - NotFoundError
        - InternalServerError
      examples:
        - path-parameters:
            collection_name: test-collection
      method: DELETE
      path: /collections/{collection_name}
      path-parameters:
        collection_name:
          docs: The name of the collection.
          type: string
    delete_index:
      auth: true
      display-name: Delete an index
      docs: This operation deletes an existing index.
      errors:
        - UnauthorizedError
        - NotFoundError
        - PreconditionFailedError
        - InternalServerError
      examples:
        - path-parameters:
            index_name: test-index
      method: DELETE
      path: /indexes/{index_name}
      path-parameters:
        index_name:
          docs: The name of the index to delete.
          type: string
    describe_collection:
      auth: true
      display-name: Describe a collection
      docs: |
        This operation gets a description of a collection.
        Serverless indexes do not support collections.
      errors:
        - UnauthorizedError
        - NotFoundError
        - InternalServerError
      examples:
        - name: A small collection.
          path-parameters:
            collection_name: tiny-collection
          response:
            body:
              dimension: 3
              environment: us-east1-gcp
              name: tiny-collection
              size: 3126700
              status: Ready
              vector_count: 99
      method: GET
      path: /collections/{collection_name}
      path-parameters:
        collection_name:
          docs: The name of the collection to be described.
          type: string
      response:
        docs: Configuration information and status of the collection.
        type: CollectionModel
    describe_index:
      auth: true
      display-name: Describe an index
      docs: Get a description of an index.
      errors:
        - UnauthorizedError
        - NotFoundError
        - InternalServerError
      examples:
        - name: A serverless index
          path-parameters:
            index_name: test-index
          response:
            body:
              deletion_protection: disabled
              dimension: 1536
              host: movie-recommendations-c01b5b5.svc.us-east1-gcp.pinecone.io
              metric: cosine
              name: movie-recommendations
              spec:
                serverless:
                  cloud: aws
                  region: us-east-1
              status:
                ready: false
                state: Initializing
              tags:
                tag0: val0
                tag1: val1
        - name: A pod-based index
          path-parameters:
            index_name: test-index
          response:
            body:
              deletion_protection: disabled
              dimension: 1536
              host: movie-recommendations-c01b5b5.svc.us-east1-gcp.pinecone.io
              metric: cosine
              name: movie-recommendations
              spec:
                pod:
                  environment: us-east-1-aws
                  metadata_config:
                    indexed:
                      - genre
                      - title
                      - imdb_rating
                  pod_type: p1.x1
                  pods: 1
                  replicas: 1
                  shards: 1
                  source_collection: movie-embeddings
              status:
                ready: false
                state: Initializing
              tags:
                tag0: val0
                tag1: val1
      method: GET
      path: /indexes/{index_name}
      path-parameters:
        index_name:
          docs: The name of the index to be described.
          type: string
      response:
        docs: Configuration information and deployment status of the index.
        type: Index
    list_collections:
      auth: true
      display-name: List collections
      docs: |
        This operation returns a list of all collections in a project.
        Serverless indexes do not support collections.
      errors:
        - UnauthorizedError
        - InternalServerError
      examples:
        - name: Multiple collections with different states
          response:
            body:
              collections:
                - dimension: 3
                  environment: us-east1-gcp
                  name: small-collection
                  size: 3126700
                  status: Ready
                  vector_count: 99
                - dimension: 3
                  environment: us-east1-gcp
                  name: small-collection-new
                  size: 3126700
                  status: Initializing
                  vector_count: 99
                - dimension: 1536
                  environment: us-east1-gcp
                  name: big-collection
                  size: 160087040000000
                  status: Ready
                  vector_count: 10000000
        - name: No collections created yet
          response:
            body:
              collections:
                - dimension: 1536
                  environment: us-east1-gcp
                  name: example-collection
                  size: 10000000
                  status: Initializing
                  vector_count: 120000
      method: GET
      path: /collections
      response:
        docs: >-
          This operation returns a list of all the collections in your current
          project.
        type: CollectionList
    list_indexes:
      auth: true
      display-name: List indexes
      docs: This operation returns a list of all indexes in a project.
      errors:
        - UnauthorizedError
        - InternalServerError
      examples:
        - name: A list containing one serverless index and one pod-based index.
          response:
            body:
              indexes:
                - deletion_protection: disabled
                  dimension: 384
                  host: semantic-search-c01b5b5.svc.us-west1-gcp.pinecone.io
                  metric: cosine
                  name: semantic-search
                  spec:
                    pod:
                      environment: us-west1-gcp
                      metadata_config:
                        indexed:
                          - genre
                          - title
                          - imdb_rating
                      pod_type: p1.x1
                      pods: 4
                      replicas: 2
                      shards: 2
                      source_collection: movie-embeddings
                  status:
                    ready: true
                    state: Ready
                  tags:
                    tag0: val0
                    tag1: val1
                - deletion_protection: disabled
                  dimension: 200
                  host: image-search-a31f9c1.svc.us-east1-gcp.pinecone.io
                  metric: dotproduct
                  name: image-search
                  spec:
                    serverless:
                      cloud: aws
                      region: us-east-1
                  status:
                    ready: false
                    state: Initializing
                  tags:
                    tag0: val0
                    tag1: val1
        - name: A list containing one serverless index.
          response:
            body:
              indexes:
                - deletion_protection: disabled
                  dimension: 1536
                  host: movie-embeddings-c01b5b5.svc.us-east1-gcp.pinecone.io
                  metric: cosine
                  name: movie-embeddings
                  spec:
                    serverless:
                      cloud: aws
                      region: us-east-1
                  status:
                    ready: false
                    state: Initializing
                  tags:
                    tag0: val0
                    tag1: val1
        - name: No indexes created yet.
          response:
            body:
              indexes:
                - deletion_protection: disabled
                  dimension: 1536
                  host: semantic-search-c01b5b5.svc.us-west1-gcp.pinecone.io
                  metric: cosine
                  name: example-index
                  spec:
                    serverless:
                      cloud: gcp
                      region: us-east-1
                  status:
                    ready: true
                    state: ScalingUpPodSize
                  tags:
                    tag0: val0
                    tag1: val1
      method: GET
      path: /indexes
      response:
        docs: >-
          This operation returns a list of all the indexes that you have
          previously created, and which are associated with the given project
        type: IndexList
  source:
    openapi: ../control-plane/openapi/openapi.yml
